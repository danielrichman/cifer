These are the planned functions for the shell to be able to execute.

buffers X                    create_buffers(int num)
quit                         exit(0)
resize buffer_X X            resizebuffer(int buffer_id, int newsize)
clear buffer_X               clearbuffer(int buffer_id)
copy buffer_X buffer_X       copybuffer(int buffer_id_1, int buffer_id_2)
load file buffer_X           file2buffer(char *name, int buffer_id)
write file buffer_X mode     buffer2file(char *name, int buffer_id, int mode)
                             mode = append, overwrite, omit/auto
                             mode = CFSH_IO_MODE_ AUTO|OVERWRITE|APPEND
filter buffer_X mode         filterbuffer(int buffer_id, int mode)  (mode, see io.h)
getsize buffer_X             get_buffer_size(int buffer_id)
getfilter buffer_X           get_buffer_filter(int buffer_id)
nullbuffer buffer_X          setbuffernull(int buffer_id)
PREFIXscript or file file    cfsh_scriptfile(char *name, int preparse, int softfail)
                             PREFIX:  quick, soft, quicksoft, softquick
score buffer_X               score_text_dict_fast(char *name, int size)
loaddict or load_dict        load_dict()

crack_affine or affine       crack_affine(char *text, int text_size)
affine_solve or affinesolve  affine_solve(int cl_1, int pl_1, int cl_2, int pl_2, int *a, int *b)
affine_bf    or affinebf     affine_bf(char *ctext, int ctext_size)
bacon                        bacon_decode(char *text, int text_size, int *new_size)
vigenere_manual or shift     caesar_cipher_enc or 
                             caesar_cipher_dec(char *text, int text_size, int *shift, int shift_size)
delta_ic     or deltaic      delta_ic(char *text, int text_size, int jump)
monoalph                     monoalph_substitute(char *text, int text_size, int *translation)
ctrans                       columnar_transposition_col2col col2row row2col (char *text, char *outtext, 
                                                                   int text_size, int *key, int key_size)
                             columnar_transposition_bruteforce(char *text, int text_size,
                                       int key_min, int key_max, columnar_transposition_function routine)
frequency_guesses  or fg     frequency_guesses(char *text, int text_size)
identity_frequency_graph or ifg
                             create_identity_frequency_graph(int *frequency_graph, int text_size)
count_freq  or frequency or fa or frequency_analysis
                             count_freq(char *text, int input_size, int *tgt)
count_digrams   or digrams   count_digrams(char *text, int input_size, digram *tgt, int tgt_size)
count_trigrams  or trigrams  count_trigrams(char *text, int input_size, trigram *tgt, int tgt_size)
chartable or pct             print_char_table()
keyword_bruteforce or keyb   keyword_bruteforce(char *text, int text_size)
keyword_table or keyt        keyword_table(char *keyword, int keyword_length, int *table)
keyword_table_flipped or keytf
                             keyword_table_preflipped(char *keyword, int keyword_length, int *table)
keyword_decode or keyd       keyword_decode(char *text, char *outtext, int text_size, int *table)
polybius                     polybius_dec(char *text, int text_size, int *new_size)
rfbf or railfence or rf      rf_bf(char *text, int text_size, int minrails, int maxrails)
vigenere_crack or vigenere   crack_vigenere(char *text, int text_size)

mmi or modmulinv             modular_multiplicative_inverse(int a, int b)
gcd or greatest_common_denominator
                             gcd(int a, int b)
coprime or is_coprime
                             IS_COPRIME(int a, int b)
charinfo or char_info or char
                             see macros.h

